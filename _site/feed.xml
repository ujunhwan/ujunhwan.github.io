<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <generator uri="http://jekyllrb.com" version="4.1.1">Jekyll</generator>
  
  
  <link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" />
  <updated>2020-09-04T12:38:15+09:00</updated>
  <id>http://localhost:4000//</id>

  
    <title type="html">ujunhwan</title>
  

  
    <subtitle>인생은... 크레이지아케이드....</subtitle>
  

  
    <author>
        <name>Junhwan</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Css layout 블럭 중앙배치</title>
      
      
      <link href="http://localhost:4000/css-layout-%EB%B8%94%EB%9F%AD-%EC%A4%91%EC%95%99%EB%B0%B0%EC%B9%98/" rel="alternate" type="text/html" title="Css layout 블럭 중앙배치" />
      
      <published>2020-09-03T00:00:00+09:00</published>
      <updated>2020-09-03T00:00:00+09:00</updated>
      <id>http://localhost:4000/css%20layout%20%EB%B8%94%EB%9F%AD%20%EC%A4%91%EC%95%99%EB%B0%B0%EC%B9%98</id>
      <content type="html" xml:base="http://localhost:4000/css-layout-%EB%B8%94%EB%9F%AD-%EC%A4%91%EC%95%99%EB%B0%B0%EC%B9%98/">&lt;h1&gt;CSS Layout block 가운데로 배치하기&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1n8oIz2i-1r_ZonFqExbzLixvlzk4vnna&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;float 이용&lt;/h2&gt;
&lt;p&gt;111, 222 2개의 블럭들을 정중앙에 위치시키고 싶었다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float: left;&lt;/code&gt;을 이용해서 왼쪽으로 흐르게 한 뒤, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;margin&lt;/code&gt;을 이용하여 중앙에 위치시키려고 하였다. 하지만 이 방법은 굉장히 불편하고, 시간도 오래걸리는 방법이기 때문에 다른 방법을 찾아보았다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;margin 이용&lt;/h2&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 방법은 글을 중앙으로 정렬하는 방법이므로, 현재 상황에선 적용되지 않는 방법이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;inline 이용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display: inline&lt;/code&gt; 을 하는 방법의 경우, 블락이 다음 그림과 같이 크기가 변하게 되므로 알맞지 않다.&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1n6fTEwT23QZkj9LdEuDT_NcuT-zvt-pN&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;inline-block 이용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display: inline-block&lt;/code&gt; 을 적용하였더니, 정확하게 정중앙에 위치하였다.&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1n2AlHWudtqIuI9sY20UDkXozHFXZBSW8&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;결론&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline&lt;/code&gt;의 경우 전후 줄바꿈 없이 한 줄에 다른 엘리먼트들과 나란히 배치가 된다. 하지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;padding&lt;/code&gt; 등의 속성이 반영되지 않으므로 블락이 크기가 변하는 현상이 발생하였던 것이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline&lt;/code&gt; 대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline-block&lt;/code&gt;을 사용하게 되면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline&lt;/code&gt;에선 반영되지 않았던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;padding&lt;/code&gt; 등의 속성들이 반영된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Code&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;CSS&lt;/h3&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;darkseagreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;19px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;HTML&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;111&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;222&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Junhwan</name>
          
          
        </author>
      

      

      

      
        <summary type="html">CSS Layout block 가운데로 배치하기 float 이용 111, 222 2개의 블럭들을 정중앙에 위치시키고 싶었다. 따라서 float: left;을 이용해서 왼쪽으로 흐르게 한 뒤, margin을 이용하여 중앙에 위치시키려고 하였다. 하지만 이 방법은 굉장히 불편하고, 시간도 오래걸리는 방법이기 때문에 다른 방법을 찾아보았다. margin 이용 margin: 0 auto; text-align: center; 이 방법은 글을 중앙으로 정렬하는 방법이므로, 현재 상황에선 적용되지 않는 방법이다. inline 이용 display: inline 을 하는 방법의 경우, 블락이 다음 그림과 같이 크기가 변하게 되므로 알맞지 않다. inline-block 이용 display: inline-block 을 적용하였더니, 정확하게 정중앙에 위치하였다. 결론 inline의 경우 전후 줄바꿈 없이 한 줄에 다른 엘리먼트들과 나란히 배치가 된다. 하지만 width, height, padding 등의 속성이 반영되지 않으므로 블락이 크기가 변하는 현상이 발생하였던 것이다. inline 대신 inline-block을 사용하게 되면, inline에선 반영되지 않았던 width, height, padding 등의 속성들이 반영된다. Code CSS section { text-align: center; overflow: hidden; } section ul { overflow: hidden; } section ul li { text-align: center; display: inline-block; position: relative; background-color:darkseagreen; width : 100px; height : 19px; padding : 3%; margin : 4px; } section ul li a { text-decoration: none; } HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;section&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;111&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;222&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Servlet</title>
      
      
      <link href="http://localhost:4000/servlet/" rel="alternate" type="text/html" title="Servlet" />
      
      <published>2020-09-01T00:00:00+09:00</published>
      <updated>2020-09-01T00:00:00+09:00</updated>
      <id>http://localhost:4000/servlet</id>
      <content type="html" xml:base="http://localhost:4000/servlet/">&lt;h2&gt;Servlet&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;servlet&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;annotation&lt;/code&gt;을 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.xml&lt;/code&gt; 을 대체한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;!--
## 1부터 10까지 출력하기
___
```java
package exam;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.PrintWriter;

@WebServlet(&quot;/ttt&quot;) //anotation을 이용
// ttt이라는 요청이 들어왔을 때 이 프로그램이 실행되면서 응답할 코드가 만들어지고 그 코드로 응답을 한다.
public class TenServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    public TenServlet() {
        super();
    }

    // 요청을 하기위한 객체, 요청을 받기위한 객체
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType(&quot;text/html;charset=utf-8&quot;);
		PrintWriter out = response.getWriter();
		out.println(&quot;&lt;h1&gt;1-1까지 출력!&lt;/h1&gt;&quot;);
		for(int i = 1; i &lt;= 10; i++) {
			out.println(i+&quot;&lt;br&gt;&quot;);
		}
		out.close();
	}
}
```  
localhost:8080/firstWeb/ttt 에 생성된다.
&lt;br&gt;
&lt;br&gt;

--&gt;
&lt;h2&gt;Servlet Lifecycle&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LifecycleServelet()&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt; 이 차례대로 실행 후, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt;함수가 페이지가 로딩될 때 마다 실행된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.annotation.WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/LifecycleServlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LifecycleServlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LifecycleServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LifecycleServlet 생성!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// print in console&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init test 호출!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;destroy 호출!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//수정되면 더이상 쓸수없으므로 destroy&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;service 호출!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;webapplication이 &lt;strong&gt;갱신&lt;/strong&gt;되거나, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WAS&lt;/code&gt;가 &lt;strong&gt;종료&lt;/strong&gt;될 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destory()&lt;/code&gt; 호출된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt;라는 메서드는 실제 HttpServlet에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt; 메서드가 구현되어있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내가 만든 클래스가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt;라는 메서드를 갖고있지 않다면 부모클래스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt; 메서드가 실행된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt;를 override하지 않았다면, httpservlet(부모)의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt; 메서드가 호출된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트의 요청이 GET이면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doGet()&lt;/code&gt; 호출 POST면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doPost()&lt;/code&gt; 호출&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;LifecycleServlet 수정&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;기존에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt;를 override했다. 이번에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt;를 주석, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doGet()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doPost()&lt;/code&gt;를 override한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;form method='post' action='/firstweb/LifecycleServlet'&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action&lt;/code&gt; : submit 버튼이 눌렸을 때, 이 주소로 요청한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'post'&lt;/code&gt; : 이 때 요청은 Post로 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;URL에서 직접 넘어갔을 때는 GET이라는 요청이 들어왔을 것이므로 HttpServlet이 가진 service() 메서드는 doGet()이라는 메서드를 호출했을 것이다. 따라서 doGet()이 실행되므로 html태그가 보인다.&lt;/p&gt;

&lt;p&gt;submit 버튼이 눌릴때 앞서 요청을 Post로 하였으므로, HttpServlet이 가진 service() 메서드가 doPost() 라는 메서드를 호출 할 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name : &amp;lt;input type='text' name='name'&amp;gt;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;input의 name이 name인 애를 받아서 name 객체에 넣는다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Request, Response&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;WAS는 웹 브라우저로부터 Servlet요청을 받으면,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;요청할 때 갖고 있는 정보를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletRequest&lt;/code&gt; 객체를 생성해 저장한다.&lt;/li&gt;
  &lt;li&gt;웹 브라우저(user)에게 응답을 보낼 때 사용하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletResponse&lt;/code&gt;객체를 생성한다.&lt;/li&gt;
  &lt;li&gt;생성된 객체들을 Servlet에게 전달한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;HttpServletRequest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;http프로토콜의 request정보를 servlet에게 전달하기 위한 목적으로 사용한다.&lt;/li&gt;
  &lt;li&gt;헤더정보, 파라미터, 쿠키, URI, URL 등의 정보를 읽어 들이는 메서드를 갖고있다. (user의 정보)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;HttpServletResponse&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Request를 보낸 client에게 응답을 보내기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletResponse&lt;/code&gt; 객체를 생성하여 servlet에게 전달한다.&lt;/li&gt;
  &lt;li&gt;servlet은 이 객체를 이용해, 응답코드, 응답메시지, content type 등을 전송한다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Header 추출&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;요청이 들어올 때 들고 들어온 헤더 정보 출력&lt;/em&gt;&lt;br /&gt;
정보를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletRequest&lt;/code&gt; 객체에 담으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;에 정보가 담겨있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaderNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getHeaderNames()&lt;/code&gt; 메서드를 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headerNames&lt;/code&gt;에 전부 담았고, while문을 이용하여 요소들을 하나씩 넘기며 출력하였다.&lt;/p&gt;

&lt;!--
```java
package examples;

import java.util.Enumeration;
import java.io.PrintWriter;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(&quot;/header&quot;)
public class HeaderServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public HeaderServlet() {
        super();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType(&quot;text/html&quot;);
		PrintWriter out = response.getWriter();
		out.println(&quot;&lt;html&gt;&quot;);
		out.println(&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;);
		out.println(&quot;&lt;body&gt;&quot;);

		Enumeration&lt;String&gt; headerNames = request.getHeaderNames();
		while(headerNames.hasMoreElements()) {
			String headerName = headerNames.nextElement();
			String headerValue = request.getHeader(headerName);
			out.println(headerName + &quot; : &quot; + headerValue + &quot; &lt;br&gt; &quot;);
		}		
		
		out.println(&quot;&lt;/body&gt;&quot;);
		out.println(&quot;&lt;/html&gt;&quot;);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}
}
```  
--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Parameter&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:8080/firstWeb/param?name=kim&amp;amp;age=5&lt;/code&gt;&lt;br /&gt;
물음표를 기준으로 뒤에있는 것들을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameter&lt;/code&gt;라고 한다. &lt;strong&gt;&amp;amp;&lt;/strong&gt; 이 기준점이고 더 많은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameter&lt;/code&gt;를 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;uri = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRequestURI()&lt;/code&gt;가 return 해준 값. url에서 port 이하 부분이 나온다.&lt;/li&gt;
  &lt;li&gt;url = 요청 주소 전체&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
```java
package examples;

import java.io.PrintWriter;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(&quot;/info&quot;)
public class InfoServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	public InfoServlet() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType(&quot;text/html&quot;);
		PrintWriter out = response.getWriter();
		out.println(&quot;&lt;html&gt;&quot;);
		out.println(&quot;&lt;head&gt;&lt;title&gt;info&lt;/title&gt;&lt;/head&gt;&quot;);
		out.println(&quot;&lt;body&gt;&quot;);

		String uri = request.getRequestURI();
		StringBuffer url = request.getRequestURL();
		String contentPath = request.getContextPath();
		String remoteAddr = request.getRemoteAddr();
		
		out.println(&quot;uri : &quot; + uri + &quot;&lt;br&gt;&quot;);
		out.println(&quot;url : &quot; + url + &quot;&lt;br&gt;&quot;);
		out.println(&quot;contentPath : &quot; + contentPath + &quot;&lt;br&gt;&quot;);
		out.println(&quot;remoteAddr : &quot; + remoteAddr + &quot;&lt;br&gt;&quot;);
		
		out.println(&quot;&lt;/body&gt;&quot;);
		out.println(&quot;&lt;/html&gt;&quot;);
	}

}

```
--&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Junhwan</name>
          
          
        </author>
      

      

      

      
        <summary type="html">Servlet servlet 은 annotation을 이용하여 web.xml 을 대체한다. Servlet Lifecycle LifecycleServelet() , init() 이 차례대로 실행 후, service()함수가 페이지가 로딩될 때 마다 실행된다. package examples; import java.io.IOException; import javax.servlet.ServletConfig; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(&quot;/LifecycleServlet&quot;) public class LifecycleServlet extends HttpServlet { private static final long serialVersionUID = 1L; public LifecycleServlet() { System.out.println(&quot;LifecycleServlet 생성!&quot;); // print in console } public void init(ServletConfig config) throws ServletException { System.out.println(&quot;init test 호출!&quot;); } public void destroy() { System.out.println(&quot;destroy 호출!&quot;); } //수정되면 더이상 쓸수없으므로 destroy protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(&quot;service 호출!&quot;); } } webapplication이 갱신되거나, WAS가 종료될 때 destory() 호출된다. service()라는 메서드는 실제 HttpServlet에 service() 메서드가 구현되어있다. 내가 만든 클래스가 service()라는 메서드를 갖고있지 않다면 부모클래스의 service() 메서드가 실행된다. 내가 service()를 override하지 않았다면, httpservlet(부모)의 service() 메서드가 호출된다. 클라이언트의 요청이 GET이면 doGet() 호출 POST면 doPost() 호출 LifecycleServlet 수정 기존에는 service()를 override했다. 이번에는 service()를 주석, doGet(), doPost()를 override한다. out.println(&quot;&amp;lt;form method='post' action='/firstweb/LifecycleServlet'&amp;gt;&quot;); action : submit 버튼이 눌렸을 때, 이 주소로 요청한다. method = 'post' : 이 때 요청은 Post로 한다. URL에서 직접 넘어갔을 때는 GET이라는 요청이 들어왔을 것이므로 HttpServlet이 가진 service() 메서드는 doGet()이라는 메서드를 호출했을 것이다. 따라서 doGet()이 실행되므로 html태그가 보인다. submit 버튼이 눌릴때 앞서 요청을 Post로 하였으므로, HttpServlet이 가진 service() 메서드가 doPost() 라는 메서드를 호출 할 것이다. out.println(&quot;name : &amp;lt;input type='text' name='name'&amp;gt;&amp;lt;br&amp;gt;&quot;); input의 name이 name인 애를 받아서 name 객체에 넣는다. Request, Response WAS는 웹 브라우저로부터 Servlet요청을 받으면, 요청할 때 갖고 있는 정보를 HttpServletRequest 객체를 생성해 저장한다. 웹 브라우저(user)에게 응답을 보낼 때 사용하기 위해 HttpServletResponse객체를 생성한다. 생성된 객체들을 Servlet에게 전달한다. HttpServletRequest http프로토콜의 request정보를 servlet에게 전달하기 위한 목적으로 사용한다. 헤더정보, 파라미터, 쿠키, URI, URL 등의 정보를 읽어 들이는 메서드를 갖고있다. (user의 정보) HttpServletResponse Request를 보낸 client에게 응답을 보내기 위해 HttpServletResponse 객체를 생성하여 servlet에게 전달한다. servlet은 이 객체를 이용해, 응답코드, 응답메시지, content type 등을 전송한다. Header 추출 요청이 들어올 때 들고 들어온 헤더 정보 출력 정보를 HttpServletRequest 객체에 담으므로 request에 정보가 담겨있다. Enumeration&amp;lt;String&amp;gt; headerNames = request.getHeaderNames(); request의 getHeaderNames() 메서드를 사용하여 headerNames에 전부 담았고, while문을 이용하여 요소들을 하나씩 넘기며 출력하였다. Parameter http://localhost:8080/firstWeb/param?name=kim&amp;amp;age=5 물음표를 기준으로 뒤에있는 것들을 parameter라고 한다. &amp;amp; 이 기준점이고 더 많은 parameter를 사용할 수 있다. uri = getRequestURI()가 return 해준 값. url에서 port 이하 부분이 나온다. url = 요청 주소 전체</summary>
      

      
      
    </entry>
  
  
</feed>
